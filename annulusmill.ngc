(Vlad's annulus milling subroutine for ngcgui)
(takes a position and a few parameters to mill an annulus)
(tool number and feedrates should be defined prior to calling)

(arguments: 1[x center] 2[y center] 3[ID] 4[OD] 5[depth] 6[start of cut height])
( 7[z safe] [depth of cut per pass] [stepover percent] [feedrate])

o<annulusmill> sub
#<x> = #1       (=0)
#<y> = #2       (=0)
#<id> = #3
#<od> = #4
#<z_end> = #5   (=-1: Bottom Z height) 
#<zstart> = #6 (=.05: height to ramp in from, above material sugg)
#<z_safe> = #7 (=.1)
#<doc_p> = #8 (=25 : percent depth per pass)
#<sop> = #9 (=30 : percent stepover)
#<feed> = #10 (=24)
#<finish> = #11 (=4: finish stepover, .010 for .25 tool)

#<tool_diam> = #5410
#<doc> = [#<tool_diam>*#<doc_p>/100]
#<step> = [#<tool_diam>*#<sop>/100]
#<z_curr> = [#<zstart>-#<doc>]  (convenient var for Z height)
#<finish> = [#<tool_diam>*#<finish>/100]

(set first rad, note rad is always inteded radius, not current)
    o<initialrad> if [[#<od>-#<id>] gt [2*[2*#<tool_diam>-#<step>]]] (mooltipass needed)
    #<rad> = [#<id>/2+#<finish>]            (convenient dim holder for intended pos)
    o<initialrad> elseif [[#<od>-#<id>] eq [#<tool_diam>*2]] (one pass)
    #<rad> = [#<id>/2]
    o<initialrad> elseif [[#<od>-#<id>] gt [#<tool_diam>*2] AND [#<od>-#<id>] le [2*[2*#<tool_diam>-#<step>]]] (two pass)
    #<rad> = [#<id>/2]
o<initialrad> endif

(if depth can be done in one pass, reset z_curr)
    o10 if [#<z_curr> lt #<z_end>]
    #<z_curr> = #<z_end>
    o10 endif
(o2n error checking)
    o20 if [#<tool_diam> eq 0]
    (msg, YOU MUST LOAD A NON 0 TOOL: FAIL AT ANNULUSMILL)
    m2
    o20 endif
    o21 if [#<id> ge #<od>]
    (msg, YOU ARE NOT ESCHER, CHECK ANNULUS ID AND OD VALUES FOR INVERSION)
    m2
    o21 endif
    o22 if [#<tool_diam> gt [[#<od>-#<id>]/2]]
    (msg, TOOL TOO LARGE: FAIL AT ANNULUSMILL)
    m2
    o22 endif

G40
F#<feed>            (set feedrate)
G00 Z#<z_safe>
G00 X#<x> Y#<y>     (go to center)
G92 X0 Y0           (set temp coordinate around center)
G00 X[#<tool_diam>/2] (prime for simple leadin 3 oclock park)
G41 (cut starts inside, left comp CW cutter and CW 02 arc)

G00 X-#<rad> Z#<zstart>                      (lower to 9 start pos, also leadin)

o<layers> while [#<z_curr> ge #<z_end>]         (if not too deep)
o<case> if [[#<od>-#<id>] gt [2*[2*#<tool_diam>-#<step>]]] (mooltipass needed)
    G02 I#<rad> Z#<z_curr> P1                    (ramp down in and cut circle)
    G02 I#<rad>                                  (clean cut)
    G02 X0 Y[#<id>/2] I#<rad> J[[#<id>*#<id>/4-#<rad>*#<rad>]/#<id>]    (arc into inner surface)
    G02 J-[#<id>/2] P1                              (clean inner surface)
    #<rad>= [#<rad>+#<tool_diam>]                   (sets rad to uncut wall dim)
    G00 X0 Y#<rad>                                  (moves to fresh surface 12)
    #<startRad> = #<rad>                            (save old value to shorten eqs)
    #<rad> = [#<rad>+#<step>]                       (set rad to next pass)
    
    o<expandingbulk> while [#<rad> le [[#<od>/2]-#<finish>]]    (keep pushing out, evals to final not cur dim)
        G03 X-#<rad> Y0 I[[#<rad>*#<rad>-#<startRad>*#<startRad>]/[-2*#<rad>]] J-[#<startRad>]  (arc out to 9)
        G03 X0 Y#<rad> I#<rad>                 (3/4 circle to 12)
        o<exitexpanding> if [[#<rad>+#<step>] lt [[#<od>/2]-#<finish>]] (check if next cut is <=od-finish, if so increment)
        #<startRad> = #<rad>                    (save old value to shorten eqs)
        #<rad> = [#<rad>+#<step>]               (keeps change nested but avoids extra final)
        o<exitexpanding> elseif [#<rad> eq [[#<od>/2]-#<finish>]]  (last rough was done, finish him!)
        #<startRad> = #<rad>                        (save it)
        #<rad> = [[#<od>/2]]                        (set to final value)
        G03 X-#<rad> Y0 I[[#<rad>*#<rad>-#<startRad>*#<startRad>]/[-2*#<rad>]] J-[#<startRad>]  (arc out to 9)
        G03 X0 Y#<rad> I#<rad>                 (3/4 circle to 12)
        G03 X0 Y-#<rad> J-#<rad>                    (finish cut)
        o<exitexpanding> else (next cut would have landed in finish region, so snap to)
        #<startRad> = #<rad>                        (save it)
        #<rad> = [[#<od>/2]-#<finish>]              (set to final rough value)
        o<exitexpanding> endif
    o<expandingbulk> endwhile

    #<startRad>=#<rad>
    #<rad> = [#<id>/2+#<finish>]              (reset goal rad)
    G02 X-#<rad> Y0 I-[[#<rad>*#<rad>-#<startRad>*#<startRad>]/[2*#<rad>]] J#<startRad>  (go to inner start pos, 6>9)

o<case> elseif [[#<od>-#<id>] eq [#<tool_diam>*2]] (one pass)
    G02 I#<rad> Z#<z_curr> P1   (circle plunge)
    G02 I#<rad>                 (finish bottom)
o<case> elseif [[#<od>-#<id>] gt [#<tool_diam>*2] AND [#<od>-#<id>] le [2*[2*#<tool_diam>-#<step>]]] (two pass)
    G01 X-#<rad>
    G02 I#<rad> Z#<z_curr> P1   (circle plunge)
    G02 I#<rad> P1              (finish bottom)
    G01 X[-#<od>/2]             (move out)
    G03 I[#<od>/2] P2
o<case> endif

    o<zcontrol> if [[#<z_curr>-#<doc>] gt #<z_end>]   (if next cut makes sense but wont finish)
    #<z_curr> = [#<z_curr>-#<doc>]
    o<zcontrol> elseif [#<z_curr> eq #<z_end>]          (if this cut just finished)
    #<z_curr> = [#<z_end>-1]    (set excessive to quit)
    o<zcontrol> elseif [[#<z_curr>-#<doc>] le #<z_end>]   (if next cut finishes or is excessive, force finish)
    #<z_curr> = #<z_end>
    o<zcontrol> endif
o<layers> endwhile

G00 Z#<z_safe>
G00 X#<x> Y#<y>
G92.1 G40
o<annulusmill> endsub
